#1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario

def factorial(n):
    if n == 0 or n == 1:    # Caso base: factorial de 0 o 1 es 1
        return 1
    else:                   # Caso recursivo: n! = n * (n-1)!
        return n * factorial(n - 1)
    
num = int(input("\nIngrese un n√∫mero entero para calcular su factorial: "))     #Se solicita un n√∫mero entero
fact = factorial(num)     #se llama a la funcion recursiva con el n√∫mero ingresado

print(f"El factorial de {num} es: {fact}")      #Se muestra el factorial del n√∫mero ingresado

#2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

def fibonacci(n):
    if n == 0: return 0      # Caso base 1
    elif n == 1: return 1    # Caso base 2  
    else: return fibonacci(n-1) + fibonacci(n-2)  # Recursi√≥n

posicion = int(input("\nIngrese la posici√≥n hasta la que desea ver la serie de Fibonacci: "))     #Se solicita una posici√≥n

print(f"\nS√©rie de Fibonacci hasta la posici√≥n {posicion}:")      #Se muestra el resultado
for i in range(posicion + 1):
    print(fibonacci(i), end=" ")

#3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

def potencia(base, exponente):
    if exponente == 0:
        return 1  # Caso base: cualquier n√∫mero elevado a 0 es 1
    else:
        return base * potencia(base, exponente - 1)

base = int(input("\nIngrese la base: "))              #Se solicita la base
exponente = int(input("Ingrese el exponente: "))      #Se solicita el exponente

resultado = potencia(base, exponente)                 #se llama a la funcion recursiva con la base y el exponente ingresado
print(f"\nResultado: {base} elevado a la {exponente} es igual a {resultado}")     #Se muestra el resultado

#4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto.

def decimal_a_binario(n):
    if n == 0:
        return "0"
    elif n == 1:
        return "1"
    else:
        return decimal_a_binario(n // 2) + str(n % 2)

num = int(input("Ingrese un n√∫mero entero positivo: "))       #Se solicita un n√∫mero positivo

if num >= 0:  
    binario = decimal_a_binario(num)                          #se llama a la funcion recursiva con el n√∫mero ingresado
    print(f"El n√∫mero {num} en binario es: {binario}")        #Se muestra el resultado
else:
    print("¬°Error!. Debe ingresar un n√∫mero entero positivo.")
    
#5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es

def es_palindromo(palabra):
    # Caso base: si la palabra tiene 0 o 1 letras, es pal√≠ndromo
    if len(palabra) <= 1:
        return True
    # Comparar primera y √∫ltima letra
    if palabra[0] != palabra[-1]:
        return False
    # Llamada recursiva con la palabra sin la primera y √∫ltima letra
    return es_palindromo(palabra[1:-1])

palabra = str(input("Ingrese una palabra sin espacios ni tildes: ")).lower()      #Se solicita un n√∫mero entero. Agregre .lower para unificar las letras a minusculas

palindromo = es_palindromo(palabra)       #se llama a la funcion recursiva con el parametro ingresado y se guarda en la variable palindromo

print(palindromo)     #Se muestra el resultado

#6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.

def suma_digitos(n):
    # Caso base: si el n√∫mero es menor a 10, es un solo d√≠gito, se devuelve tal cual
    if n < 10:
        return n
    # Paso recursivo: sumar el √∫ltimo d√≠gito con la suma de los restantes
    return (n % 10) + suma_digitos(n // 10)

num = int(input("\nIngrese un n√∫mero positivo: "))      #Se solicita un n√∫mero entero

suma = suma_digitos(num)      #se llama a la funcion recursiva con el parametro ingresado y se guarda en la variable suma

print(f"La suma de todos los digitos del n√∫mero {num} es: {suma}")      #Se muestra el resultados

#7) Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide.

def contar_bloques(n):
    # Caso base: si solo hay un nivel, se necesita un solo bloque
    if n == 1:
        return 1
    # Paso recursivo: sumar los bloques del nivel actual con los necesarios para los niveles superiores
    return n + contar_bloques(n - 1)

num_block = int(input("\nIngrese el n√∫mero de bloques del nivel m√°s bajo: "))   #Se solicita el n√∫mero base de bloques 

total_bock = contar_bloques(num_block)      #se llama a la funcion recursiva con el parametro ingresado y se guarda en la varaible total block

print(f"{total_bock}")      #Se muestra el resultado

#8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.

def contar_digito(numero, digito):
    # Caso base: si el n√∫mero es 0, no hay m√°s d√≠gitos que contar
    if numero == 0:
        return 0
    # Verificar si el √∫ltimo d√≠gito del n√∫mero coincide con el buscado
    if numero % 10 == digito:
        return 1 + contar_digito(numero // 10, digito)
    else:
        return contar_digito(numero // 10, digito)
    
num = int(input("\nIngresa un n√∫mero entero positivo: "))       #Se solicita un n√∫mero entero positivo
digito = int(input("Ingresa un digito (entre 0 y 9): "))        #Se solicita un d√≠gito

total_digito = contar_digito(num,digito)        #se llama a la funcion recursiva con el n√∫mero y digito ingresado

print(f"En el n√∫mero {num} el d√≠gito {digito} aparece {total_digito} veces")        #Se muestra el resultado


